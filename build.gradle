forceUpdate = (forceUpdate ?: true).toBoolean()

def topsecretTaskGroup = 'topsecret'

task startVirtualMachine(type: StartVirtualMachine, group: topsecretTaskGroup) {
	onlyIf {
		!new Vagrant().isRunning()
	}
}

task downloadRelease(type: DownloadRelease, group: topsecretTaskGroup, dependsOn: startVirtualMachine) {
	username = project.username
	password = project.password
	releaseVersion = project.releaseVersion
	mode = downloadMode
	if (downloadFile != '') {
		sourceFile = file(downloadFile)	
	}

	outputs.upToDateWhen {
		// forceUpdate means the file should be freshly downloaded
		// SNAPSHOT release files will always be freshly downloaded
		// if the file doesn't exist yet, it needs to be downloaded
		!forceUpdate && !(releaseVersion ==~ /(?i).*SNAPSHOT.*/) && destinationFile.exists()
	}
}

task deployRelease(type: DeployRelease, group: topsecretTaskGroup, dependsOn: downloadRelease) {
	releaseFile = downloadRelease.destinationFile
}

//task configureApplicationServer(type: ConfigureApplicationServer)

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}




class StartVirtualMachine extends DefaultTask {
	def vagrant = new Vagrant()
		
	@TaskAction
	void startVirtualMachine() {
		println 'starting vm ...'
		vagrant.start()
	}
}

class DownloadRelease extends DefaultTask {
	enum Mode {
		NEXUS,
		LOCAL_REPO,
		FILE
	}

	String username
	String password
	String releaseVersion
	Mode mode = Mode.LOCAL_REPO
	File sourceFile

	File getDestinationFile() {
		return project.file("releases/release-${releaseVersion}.ear")
	}

	@TaskAction
	void downloadRelease() {
		if (mode == Mode.NEXUS) downloadFromNexus()
		if (mode == Mode.FILE) downloadFromFile()
		if (mode == Mode.LOCAL_REPO) downloadFromLocalRepository()
	}

	private void downloadFromNexus() {
		println 'downloading release from nexus'

		ant.get(
			dest: destinationFile.absolutePath, 
			src: 'http://dinauer.at/etc/files/puppetlabs-stdlib-3.2.0.tar.gz', 
			username: username,
			password: password
		)
	}

	private void downloadFromLocalRepository() {
		println 'downloading release from local repository ...'
		def source = "/home/alex/.m2/repository/at/dinauer/fhbay-ear/${releaseVersion}/fhbay-ear-${releaseVersion}.ear"

		ant.copy(
			file: source,
			tofile: destinationFile.absolutePath
		)
	}

	private void downloadFromFile() {
		println 'downloading release from file ...'
		
		ant.copy(
			file: sourceFile,
			tofile: destinationFile.absolutePath
		)
	}
}

class DeployRelease extends DefaultTask {
	File releaseFile

	@TaskAction
	void deployRelease() {
		println 'deploying release ...'
		println 'release file: ' + releaseFile.absolutePath
	}
}

class Vagrant {
	enum Status {
		NOT_CREATED,
		RUNNING,
		ABORTED,
		POWEROFF,
		SAVED
	}
	
	StringBuilder output = new StringBuilder()
	
	def isInstalled() {
		execute('-v')
		return output.toString().startsWith("Vagrant version")
	}
	
	def isRunning() {
		return status() == Status.RUNNING
	}
	
	def status() {
		execute('status')
		
		def status
		
		output.toString().find(/default.*/) { statusLine ->
			status = parseStatus(statusLine)
		}
		
		return status
	}
	
	def start() {
		execute('up')
	}
	
	def parseStatus(statusLine) {
		if (statusLine ==~ /.*running.*/) {
			return Status.RUNNING
		} else if (statusLine ==~ /.*not created.*/) {
			return Status.NOT_CREATED
		} else if (statusLine ==~ /.*aborted.*/) {
			return Status.ABORTED
		} else if (statusLine ==~ /.*poweroff.*/) {
			return Status.POWEROFF
		} else if (statusLine ==~ /.*saved.*/) {
			return Status.SAVED
		} else {
			throw new GradleException('Unknown vagrant status: ' + statusLine)
		}
	}
	
	def execute(command) {
		def vagrantCommand = 'vagrant ' + command;
		def p = vagrantCommand.execute()
				
		p.consumeProcessOutput(output, System.err)
		p.waitFor()
	}
}
